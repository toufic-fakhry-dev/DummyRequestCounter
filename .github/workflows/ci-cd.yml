name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Workflow scaffold OK
        run: echo "Scaffold created; we will add clean, test, build & push next."

  clean:
    name: Clean workspace
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Remove Python caches and artifacts
        run: |
          rm -rf **/__pycache__ .pytest_cache .ruff_cache .mypy_cache .tox build dist *.egg-info

  # Optional: Lint job (wonâ€™t fail the pipeline)
  lint:
    name: Lint (ruff + black --check)
    runs-on: ubuntu-latest
    needs: clean
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install linters
        run: python -m pip install --upgrade pip && pip install ruff black
      - name: Ruff (fatal errors only)
        run: ruff check --select E9,F63,F7,F82 --output-format=github .
      - name: Black (check formatting)
        run: black --check .

  test:
    name: Test (pytest)
    runs-on: ubuntu-latest
    needs: clean
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        run: python -m pip install --upgrade pip && pip install -r requirements.txt
      - name: Run pytest
        run: pytest -q --maxfail=1 --disable-warnings --cov=.
      - name: Upload test reports (optional)
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs
          path: ./.pytest_cache

  build_and_push:
    name: Build & (conditionally) Push Docker image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Login only when we intend to push (protects secrets on PRs)
      - name: Docker login (only on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_IMAGE }}   # e.g., mariethereseh/dummyrequestcounter
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long
      - name: Build (always) & Push (only on main)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
