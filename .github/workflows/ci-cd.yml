name: CI/CD

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read
  packages: read

jobs:
  # ---------- 1) Code Quality: lint, types, security, deps vuln ----------
  code_quality:
    name: Code Quality (ruff/mypy/bandit/pip-audit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install quality tools
        run: |
          python -m pip install -U pip
          pip install ruff mypy bandit pip-audit

      - name: Ruff (lint)
        run: ruff check --exit-zero .

      - name: Mypy (types)
        run: mypy app --ignore-missing-imports || true

      - name: Bandit (security)
        run: bandit -q -r app || true

      - name: pip-audit (deps vulnerabilities)
        run: pip-audit -r requirements.txt || true

  # ---------- 2) Unit Tests ----------
  unit_tests:
    name: Unit Tests (pytest)
    runs-on: ubuntu-latest
    needs: code_quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Run pytest
        run: python -m pytest tests/ -v

  # ---------- 3) Integration / E2E via Docker Compose ----------
  integration_e2e:
    name: Integration & E2E (docker compose)
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compose up (build + run)
        run: docker compose up -d --build

      - name: Wait for API
        shell: bash
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/ping > /dev/null; then
              echo "API is up"; exit 0
            fi
            sleep 2
          done
          echo "API did not become ready in time"; docker compose logs api; exit 1

      - name: E2E check
        run: curl -v http://localhost:8000/ping

      - name: Show logs (API)
        run: docker compose logs api

      - name: Compose down (cleanup)
        if: always()
        run: docker compose down -v

  # ---------- 4) Build image and test container without compose ----------
  build_and_test_container:
    name: Build Image & Container Test
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build local image
        run: docker build -t dummy-request-counter-api:ci .

      - name: Create network and run Redis
        run: |
          docker network create ci_net
          docker run -d --name ci-redis --network ci_net redis:7-alpine

      - name: Run API container and wait
        shell: bash
        run: |
          docker run -d --name ci-api --network ci_net -p 8000:8000 \
            -e REDIS_HOST=ci-redis \
            dummy-request-counter-api:ci
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/ping > /dev/null; then
              echo "Container ready"; exit 0
            fi
            sleep 2
          done
          echo "API container not ready"; docker logs ci-api; exit 1

      - name: Verify /ping
        run: curl -v http://localhost:8000/ping

      - name: Cleanup
        if: always()
        run: |
          docker rm -f ci-api ci-redis || true
          docker network rm ci_net || true
