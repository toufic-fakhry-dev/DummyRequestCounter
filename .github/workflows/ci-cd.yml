name: CI / CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: dummyrequestcounter

jobs:
  # -----------------------
  # CODE QUALITY / SECURITY
  # -----------------------
  lint:
    name: Code quality & security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linters & scanners
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy bandit

      - name: Run flake8 (style)
        run: flake8 .

      - name: Run mypy (static typing)
        run: |
          python -m pip install -r requirements.txt
          mypy .

      - name: Run bandit (security scan)
        run: |
          python -m pip install -r requirements.txt
          bandit app.py

  # -----------------------
  # UNIT TESTS
  # -----------------------
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: Run pytest (unit)
        run: |
          # If you use markers: pytest -m "unit" -v
          python -m pytest tests/ -v

  # -----------------------
  # INTEGRATION TESTS (uses Redis service)
  # -----------------------
  integration-tests:
    name: Integration tests (with Redis service)
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: Wait for redis service
        run: |
          # wait until redis responds (retry loop)
          for i in {1..15}; do
            if docker run --rm --network host redis:7.0-alpine redis-cli -h 127.0.0.1 ping 2>/dev/null | grep -q PONG; then
              echo "redis ready" && break
            fi
            echo "waiting for redis..." && sleep 1
          done || true

      - name: Run integration tests
        run: |
          # run tests marked as integration if you used markers:
          # python -m pytest -m integration -v
          python -m pytest tests/ -v

  # -----------------------
  # BUILD IMAGE + SMOKE TEST
  # -----------------------
  build-and-test-image:
    name: Build image & smoke-test
    runs-on: ubuntu-latest
    needs: integration-tests
    services:
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (load into runner)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: image-test:latest
          load: true

      - name: Run container from built image
        run: |
          docker run -d --name ci_test_container -p 8000:8000 image-test:latest

          # wait for container to be ready
          for i in {1..20}; do
            if curl -sS http://localhost:8000/health-check >/dev/null; then
              echo "app responded" && break
            fi
            echo "waiting for app..." && sleep 1
          done

      - name: Smoke test endpoint
        run: |
          curl -v http://localhost:8000/ --fail

      - name: Stop and remove container
        if: always()
        run: |
          docker rm -f ci_test_container || true

  # -----------------------
  # CD: build & push to Docker Hub (only on main)
  # -----------------------
  publish-to-dockerhub:
    name: Publish image to Docker Hub
    runs-on: ubuntu-latest
    needs: build-and-test-image
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image (latest + sha)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}